{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\GODS HERITAGE\\\\Desktop\\\\Mern-Portfolio\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Users\\\\GODS HERITAGE\\\\Desktop\\\\Mern-Portfolio\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useRef, useEffect, forwardRef, useState, useImperativeHandle, createElement } from 'react';\n\nvar noop = function noop() {};\n\nfunction useInterval(callback, delay, immediate) {\n  var savedCallback = useRef(noop);\n  useEffect(function () {\n    savedCallback.current = callback;\n  });\n  useEffect(function () {\n    if (!immediate) return;\n    if (delay === null || delay === false) return;\n    savedCallback.current();\n  }, [immediate]);\n  useEffect(function () {\n    if (delay === null || delay === false) return undefined;\n\n    var tick = function tick() {\n      return savedCallback.current();\n    };\n\n    var id = setInterval(tick, delay);\n    return function () {\n      return clearInterval(id);\n    };\n  }, [delay]);\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nvar LoadingBar = forwardRef(function (_ref, ref) {\n  var progress = _ref.progress,\n      _ref$height = _ref.height,\n      _height = _ref$height === void 0 ? 2 : _ref$height,\n      _ref$className = _ref.className,\n      _className = _ref$className === void 0 ? '' : _ref$className,\n      _ref$color = _ref.color,\n      _color = _ref$color === void 0 ? 'red' : _ref$color,\n      _ref$background = _ref.background,\n      _background = _ref$background === void 0 ? 'transparent' : _ref$background,\n      onLoaderFinished = _ref.onLoaderFinished,\n      _ref$transitionTime = _ref.transitionTime,\n      _transitionTime = _ref$transitionTime === void 0 ? 300 : _ref$transitionTime,\n      _ref$loaderSpeed = _ref.loaderSpeed,\n      _loaderSpeed = _ref$loaderSpeed === void 0 ? 500 : _ref$loaderSpeed,\n      _ref$waitingTime = _ref.waitingTime,\n      _waitingTime = _ref$waitingTime === void 0 ? 1000 : _ref$waitingTime,\n      _ref$shadow = _ref.shadow,\n      _shadow = _ref$shadow === void 0 ? true : _ref$shadow,\n      _ref$containerStyle = _ref.containerStyle,\n      _containerStyle = _ref$containerStyle === void 0 ? {} : _ref$containerStyle,\n      _ref$style = _ref.style,\n      _style = _ref$style === void 0 ? {} : _ref$style,\n      _ref$shadowStyle = _ref.shadowStyle,\n      shadowStyleProp = _ref$shadowStyle === void 0 ? {} : _ref$shadowStyle,\n      _ref$containerClassNa = _ref.containerClassName,\n      _containerClassName = _ref$containerClassNa === void 0 ? '' : _ref$containerClassNa;\n\n  var isMounted = useRef(false);\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      localProgress = _useState2[0],\n      localProgressSet = _useState2[1];\n\n  var _useState3 = useState({\n    active: false,\n    startingValue: 20,\n    refreshRate: 1000\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      pressedContinuous = _useState4[0],\n      setPressedContinuous = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      usingProps = _useState6[0],\n      setUsingProps = _useState6[1];\n\n  var _useState7 = useState({\n    active: false,\n    value: 20\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      pressedStaticStart = _useState8[0],\n      setStaticStartPressed = _useState8[1];\n\n  var initialLoaderStyle = {\n    height: '100%',\n    background: _color,\n    transition: \"all \".concat(_loaderSpeed, \"ms ease\"),\n    width: '0%'\n  };\n  var loaderContainerStyle = {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    height: _height,\n    background: _background,\n    zIndex: 99999999999,\n    width: 100 + '%'\n  };\n  var initialShadowStyles = {\n    boxShadow: \"0 0 10px \".concat(_color, \", 0 0 10px \").concat(_color),\n    width: '5%',\n    opacity: 1,\n    position: 'absolute',\n    height: '100%',\n    transition: \"all \".concat(_loaderSpeed, \"ms ease\"),\n    transform: 'rotate(3deg) translate(0px, -4px)',\n    left: '-10rem'\n  };\n\n  var _useState9 = useState(initialLoaderStyle),\n      _useState10 = _slicedToArray(_useState9, 2),\n      loaderStyle = _useState10[0],\n      loaderStyleSet = _useState10[1];\n\n  var _useState11 = useState(initialShadowStyles),\n      _useState12 = _slicedToArray(_useState11, 2),\n      shadowStyle = _useState12[0],\n      shadowStyleSet = _useState12[1];\n\n  useEffect(function () {\n    isMounted.current = true;\n    return function () {\n      isMounted.current = false;\n    };\n  }, []);\n  useImperativeHandle(ref, function () {\n    return {\n      continuousStart: function continuousStart(startingValue) {\n        var refreshRate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;\n        if (pressedStaticStart.active) return;\n\n        if (usingProps) {\n          console.warn(\"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\");\n          return;\n        }\n\n        var val = startingValue || randomInt(10, 20);\n        setPressedContinuous({\n          active: true,\n          refreshRate: refreshRate,\n          startingValue: startingValue\n        });\n        localProgressSet(val);\n        checkIfFull(val);\n      },\n      staticStart: function staticStart(startingValue) {\n        if (pressedContinuous.active) return;\n\n        if (usingProps) {\n          console.warn(\"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\");\n          return;\n        }\n\n        var val = startingValue || randomInt(30, 50);\n        setStaticStartPressed({\n          active: true,\n          value: val\n        });\n        localProgressSet(val);\n        checkIfFull(val);\n      },\n      complete: function complete() {\n        if (usingProps) {\n          console.warn(\"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\");\n          return;\n        }\n\n        localProgressSet(100);\n        checkIfFull(100);\n      }\n    };\n  });\n  useEffect(function () {\n    loaderStyleSet(_objectSpread(_objectSpread({}, loaderStyle), {}, {\n      background: _color\n    }));\n    shadowStyleSet(_objectSpread(_objectSpread({}, shadowStyle), {}, {\n      boxShadow: \"0 0 10px \".concat(_color, \", 0 0 5px \").concat(_color)\n    }));\n  }, [_color]);\n  useEffect(function () {\n    if (ref) {\n      if (ref && progress !== undefined) {\n        console.warn('react-top-loading-bar: You can\\'t use both controlling by props and ref methods to control the bar! Please use only props or only ref methods! Ref methods will override props if \"ref\" property is available.');\n        return;\n      }\n\n      checkIfFull(localProgress);\n      setUsingProps(false);\n    } else {\n      if (progress) checkIfFull(progress);\n      setUsingProps(true);\n    }\n  }, [progress]);\n\n  var checkIfFull = function checkIfFull(_progress) {\n    if (_progress >= 100) {\n      loaderStyleSet(_objectSpread(_objectSpread({}, loaderStyle), {}, {\n        width: '100%'\n      }));\n\n      if (_shadow) {\n        shadowStyleSet(_objectSpread(_objectSpread({}, shadowStyle), {}, {\n          left: _progress - 10 + '%'\n        }));\n      }\n\n      setTimeout(function () {\n        if (!isMounted.current) {\n          return;\n        }\n\n        loaderStyleSet(_objectSpread(_objectSpread({}, loaderStyle), {}, {\n          opacity: 0,\n          width: '100%',\n          transition: \"all \".concat(_transitionTime, \"ms ease-out\"),\n          color: _color\n        }));\n        setTimeout(function () {\n          if (!isMounted.current) {\n            return;\n          }\n\n          if (pressedContinuous.active) {\n            setPressedContinuous(_objectSpread(_objectSpread({}, pressedContinuous), {}, {\n              active: false\n            }));\n            localProgressSet(0);\n            checkIfFull(0);\n          }\n\n          if (pressedStaticStart.active) {\n            setStaticStartPressed(_objectSpread(_objectSpread({}, pressedStaticStart), {}, {\n              active: false\n            }));\n            localProgressSet(0);\n            checkIfFull(0);\n          }\n\n          if (onLoaderFinished) onLoaderFinished();\n          localProgressSet(0);\n          checkIfFull(0);\n        }, _transitionTime);\n      }, _waitingTime);\n    } else {\n      loaderStyleSet(function (_loaderStyle) {\n        return _objectSpread(_objectSpread({}, _loaderStyle), {}, {\n          width: _progress + '%',\n          opacity: 1,\n          transition: _progress > 0 ? \"all \".concat(_loaderSpeed, \"ms ease\") : ''\n        });\n      });\n\n      if (_shadow) {\n        shadowStyleSet(_objectSpread(_objectSpread({}, shadowStyle), {}, {\n          left: _progress - 5.5 + '%',\n          transition: _progress > 0 ? \"all \".concat(_loaderSpeed, \"ms ease\") : ''\n        }));\n      }\n    }\n  };\n\n  useInterval(function () {\n    var random = randomInt(10, 20);\n\n    if (localProgress + random < 90) {\n      localProgressSet(localProgress + random);\n      checkIfFull(localProgress + random);\n    }\n  }, pressedContinuous.active ? pressedContinuous.refreshRate : null);\n  return createElement(\"div\", {\n    className: _containerClassName,\n    style: _objectSpread(_objectSpread({}, loaderContainerStyle), _containerStyle)\n  }, createElement(\"div\", {\n    className: _className,\n    style: _objectSpread(_objectSpread({}, loaderStyle), _style)\n  }, _shadow ? createElement(\"div\", {\n    style: _objectSpread(_objectSpread({}, shadowStyle), shadowStyleProp)\n  }) : null));\n});\nexport default LoadingBar;","map":{"version":3,"mappings":"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","names":["noop","useInterval","callback","delay","immediate","savedCallback","useRef","useEffect","current","undefined","tick","id","setInterval","clearInterval","randomInt","min","max","Math","floor","random","LoadingBar","forwardRef","ref","progress","height","className","color","background","onLoaderFinished","transitionTime","loaderSpeed","waitingTime","shadow","containerStyle","style","shadowStyle","shadowStyleProp","containerClassName","isMounted","useState","localProgress","localProgressSet","active","startingValue","refreshRate","pressedContinuous","setPressedContinuous","usingProps","setUsingProps","value","pressedStaticStart","setStaticStartPressed","initialLoaderStyle","transition","width","loaderContainerStyle","position","top","left","zIndex","initialShadowStyles","boxShadow","opacity","transform","loaderStyle","loaderStyleSet","shadowStyleSet","useImperativeHandle","continuousStart","console","warn","val","checkIfFull","staticStart","complete","_progress","setTimeout","_loaderStyle","React"],"sources":["../src/useInterval.ts","../src/utils.ts","../src/index.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react'\n\n/** keep typescript happy */\nconst noop = () => {}\n\nexport function useInterval(\n  callback: () => void,\n  delay: number | null | false,\n  immediate?: boolean\n) {\n  const savedCallback = useRef(noop)\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  })\n\n  // Execute callback if immediate is set.\n  useEffect(() => {\n    if (!immediate) return\n    if (delay === null || delay === false) return\n    savedCallback.current()\n  }, [immediate])\n\n  // Set up the interval.\n  useEffect(() => {\n    if (delay === null || delay === false) return undefined\n    const tick = () => savedCallback.current()\n    const id = setInterval(tick, delay)\n    return () => clearInterval(id)\n  }, [delay])\n}\n\nexport default useInterval\n","export function randomInt(min: number, max: number): number {\n  // @ts-ignore\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n","import * as React from 'react'\nimport {\n  CSSProperties,\n  useEffect,\n  useState,\n  forwardRef,\n  useImperativeHandle,\n  useRef,\n} from 'react'\nimport { useInterval } from './useInterval'\nimport { randomInt } from './utils'\n\ntype IProps = {\n  progress?: number\n  color?: string\n  shadow?: boolean\n  background?: string\n  height?: number\n  onLoaderFinished?: () => void\n  className?: string\n  containerClassName?: string\n  loaderSpeed?: number\n  transitionTime?: number\n  waitingTime?: number\n  style?: CSSProperties\n  containerStyle?: CSSProperties\n  shadowStyle?: CSSProperties\n}\n\nexport type LoadingBarRef = {\n  continuousStart: (startingValue: number, refreshRate: number) => void\n  staticStart: (startingValue: number) => void\n  complete: () => void;\n}\n\nconst LoadingBar = forwardRef<LoadingBarRef, IProps>(\n  (\n    {\n      progress,\n      height = 2,\n      className = '',\n      color = 'red',\n      background = 'transparent',\n      onLoaderFinished,\n      transitionTime = 300,\n      loaderSpeed = 500,\n      waitingTime = 1000,\n      shadow = true,\n      containerStyle = {},\n      style = {},\n      shadowStyle: shadowStyleProp = {},\n      containerClassName = ''\n    },\n    ref\n  ) => {\n    const isMounted = useRef(false);\n    const [localProgress, localProgressSet] = useState<number>(0)\n    const [pressedContinuous, setPressedContinuous] = useState<{\n      active: boolean\n      startingValue: number\n      refreshRate: number\n    }>({ active: false, startingValue: 20, refreshRate: 1000 })\n    const [usingProps, setUsingProps] = useState(false)\n\n    const [pressedStaticStart, setStaticStartPressed] = useState<{\n      active: boolean\n      value: number\n    }>({ active: false, value: 20 })\n\n    const initialLoaderStyle: CSSProperties = {\n      height: '100%',\n      background: color,\n      transition: `all ${loaderSpeed}ms ease`,\n      width: '0%',\n    }\n\n    const loaderContainerStyle: CSSProperties = {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      height,\n      background,\n      zIndex: 99999999999,\n      width: 100 + '%',\n    }\n\n    const initialShadowStyles: CSSProperties = {\n      boxShadow: `0 0 10px ${color}, 0 0 10px ${color}`,\n      width: '5%',\n      opacity: 1,\n      position: 'absolute',\n      height: '100%',\n      transition: `all ${loaderSpeed}ms ease`,\n      transform: 'rotate(3deg) translate(0px, -4px)',\n      left: '-10rem',\n    }\n\n    const [loaderStyle, loaderStyleSet] = useState<CSSProperties>(\n      initialLoaderStyle\n    )\n    const [shadowStyle, shadowStyleSet] = useState<CSSProperties>(\n      initialShadowStyles\n    )\n\n    useEffect(() => {\n      isMounted.current = true;\n      return () => {\n        isMounted.current = false;\n      }\n    }, []);\n\n    useImperativeHandle(ref, () => ({\n      continuousStart(startingValue: number, refreshRate: number = 1000) {\n        if (pressedStaticStart.active) return\n        if (usingProps) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n          )\n          return\n        }\n\n        const val = startingValue || randomInt(10, 20)\n        setPressedContinuous({\n          active: true,\n          refreshRate,\n          startingValue,\n        })\n        localProgressSet(val)\n        checkIfFull(val)\n      },\n      staticStart(startingValue: number) {\n        if (pressedContinuous.active) return\n        if (usingProps) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n          )\n          return\n        }\n\n        const val = startingValue || randomInt(30, 50)\n        setStaticStartPressed({\n          active: true,\n          value: val,\n        })\n        localProgressSet(val)\n        checkIfFull(val)\n      },\n      complete() {\n        if (usingProps) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n          )\n          return\n        }\n        localProgressSet(100)\n        checkIfFull(100)\n      },\n    }))\n\n    useEffect(() => {\n      loaderStyleSet({\n        ...loaderStyle,\n        background: color,\n      })\n\n      shadowStyleSet({\n        ...shadowStyle,\n        boxShadow: `0 0 10px ${color}, 0 0 5px ${color}`,\n      })\n    }, [color])\n\n    useEffect(() => {\n      if (ref) {\n        if (ref && progress !== undefined) {\n          console.warn(\n            'react-top-loading-bar: You can\\'t use both controlling by props and ref methods to control the bar! Please use only props or only ref methods! Ref methods will override props if \"ref\" property is available.'\n          )\n          return\n        }\n        checkIfFull(localProgress)\n        setUsingProps(false)\n      } else {\n        if (progress) checkIfFull(progress)\n\n        setUsingProps(true)\n      }\n    }, [progress])\n\n    const checkIfFull = (_progress: number) => {\n      if (_progress >= 100) {\n        // now it should wait a little bit\n        loaderStyleSet({\n          ...loaderStyle,\n          width: '100%',\n        })\n        if (shadow) {\n          shadowStyleSet({\n            ...shadowStyle,\n            left: _progress - 10 + '%',\n          })\n        }\n\n        setTimeout(() => {\n          if (!isMounted.current) {\n            return;\n          }\n          // now it can fade out\n          loaderStyleSet({\n            ...loaderStyle,\n            opacity: 0,\n            width: '100%',\n            transition: `all ${transitionTime}ms ease-out`,\n            color: color,\n          })\n\n          setTimeout(() => {\n            if (!isMounted.current) {\n              return;\n            }\n            // here we wait for it to fade\n            if (pressedContinuous.active) {\n              // if we have continous loader just ending, we kill it and reset it\n              setPressedContinuous({\n                ...pressedContinuous,\n                active: false,\n              })\n              localProgressSet(0)\n              checkIfFull(0)\n            }\n\n            if (pressedStaticStart.active) {\n              setStaticStartPressed({\n                ...pressedStaticStart,\n                active: false,\n              })\n              localProgressSet(0)\n              checkIfFull(0)\n            }\n\n            if (onLoaderFinished) onLoaderFinished()\n            localProgressSet(0)\n            checkIfFull(0)\n          }, transitionTime)\n        }, waitingTime)\n      } else {\n        loaderStyleSet((_loaderStyle) => {\n          return {\n            ..._loaderStyle,\n            width: _progress + '%',\n            opacity: 1,\n            transition: _progress > 0 ? `all ${loaderSpeed}ms ease` : '',\n          }\n        })\n\n        if (shadow) {\n          shadowStyleSet({\n            ...shadowStyle,\n            left: _progress - 5.5 + '%',\n            transition: _progress > 0 ? `all ${loaderSpeed}ms ease` : '',\n          })\n        }\n      }\n    }\n\n    useInterval(\n      () => {\n        const random = randomInt(10, 20)\n\n        if (localProgress + random < 90) {\n          localProgressSet(localProgress + random)\n          checkIfFull(localProgress + random)\n        }\n      },\n      pressedContinuous.active ? pressedContinuous.refreshRate : null\n    )\n\n    return (\n      <div className={containerClassName} style={{...loaderContainerStyle, ...containerStyle}}>\n        <div className={className} style={{...loaderStyle, ...style}}>\n          {shadow ? <div style={{...shadowStyle, ...shadowStyleProp}} /> : null}\n        </div>\n      </div>\n    )\n  }\n)\n\nexport {\n  IProps,\n}\n\nexport default LoadingBar\n"]},"metadata":{},"sourceType":"module"}